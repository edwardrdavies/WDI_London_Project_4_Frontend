"use strict";function Auth(e,t){e.loginUrl=t+"/login",e.signupUrl=t+"/register",e.tokenPrefix=""}function RegisterController(e,t){function o(){e.signup(r.user).then(function(){t.go("login")})}var r=this;r.user={},r.submit=o}function LoginController(e,t){function o(){e.login(r.credentials).then(function(){t.go("postsIndex")})}var r=this;r.credentials={},r.submit=o}function Comment(e,t){return new e(t+"/comments/:id",{id:"@id"},{update:{method:"PUT"}})}function CommentsIndexController(e,t){function o(){console.log("hi ED",r.newcomment),e.save(r.newcomment,function(){t.go("commentsIndex")})}var r=this;r.all=e.query(),r.newcomment={},r.comment=o}function CommentsNewController(e,t,o){function r(){console.log("comment: ",n.comment),e.save(n.comment,function(){t.reload()})}var n=this;n.comment={},n.comment.post_id=parseInt(t.params.id),n.comment.user_id=parseInt(o.getPayload().id),n.create=r}function CommentsShowController(e,t,o){function r(){n.post.$remove(function(){t.go("commentsIndex")})}var n=this;n.post=e.get(t.params),n.delete=r,n.isLoggedIn=o.isAuthenticated}function CommentsEditController(e,t){function o(){r.post.$update(function(){t.go("commentsShow",t.params)})}var r=this;r.post=e.get(t.params),this.update=o}function dragDrop(){var e=new FileReader;return{restrict:"E",replace:!0,templateUrl:"templates/dragDrop.html",scope:{base64:"=",src:"="},link:function(t,o){t.active=!1,e.onload=function(){t.base64=e.result,t.$apply()},o.on("dragover",function(){t.active=!0,t.$apply()}).on("dragover",function(e){e.preventDefault()}).on("dragleave",function(){t.active=!1,t.$apply()}).on("drop",function(t){t.preventDefault();var o=(t.target.files||t.dataTransfer.files)[0];e.readAsDataURL(o)})}}}function Like(e,t){return new e(t+"/likes/:id",{id:"@id"},{update:{method:"PUT"}})}function LikesController(e){function t(){Like.save(o.like,function(){$state.go("postsIndex")})}var o=this;o.like={},o.create=t}function MainController(e,t,o){function r(){console.log("clicked"),e.logout().then(function(){t.go("usersIndex")})}function n(o,r){return e.getPayload()?l.currentUser=e.getPayload().id:(l.message=null,void(!e.isAuthenticated()&&s.includes(r.name)&&(o.preventDefault(),t.go("login"),l.message="You must be logged in to go there!")))}var l=this;l.isLoggedIn=e.isAuthenticated,l.message=null;var s=["usersEdit"];o.$on("$stateChangeStart",n),l.logout=r}function Post(e,t){return new e(t+"/posts/:id",{id:"@id"},{update:{method:"PUT"}})}function PostsIndexController(e,t,o){function r(e){n.newlike={post_id:e.id},console.log("hi ED",n.newlike),t.save(n.newlike,function(){o.go("postsIndex"),e.likes_length++})}var n=this;n.all=e.query(),console.log(n.all),n.all.reverse(),console.log(n.all),n.newlike={},n.like=r}function PostsNewController(e,t){function o(){e.save(r.post,function(){t.go("postsIndex")})}var r=this;r.post={},r.create=o}function PostsShowController(e,t,o){function r(){n.post.$remove(function(){t.go("postsIndex")})}var n=this;o.isAuthenticated()&&(n.currentUserId=o.getPayload().id),n.isCurrentUser=!1,e.get(t.params).$promise.then(function(e){n.post=e,n.currentUserId===n.post.user_id&&(n.isCurrentUser=!0)}),console.log(n.post),n.delete=r,n.isLoggedIn=o.isAuthenticated}function PostsEditController(e,t){function o(){r.post.$update(function(){t.go("postsShow",t.params)})}var r=this;r.post=e.get(t.params),this.update=o}function Router(e,t){e.state("usersIndex",{url:"/users",templateUrl:"/templates/usersIndex.html",controller:"UsersIndexController as usersIndex"}).state("register",{url:"/register",templateUrl:"/templates/register.html",controller:"RegisterController as register"}).state("login",{url:"/login",templateUrl:"/templates/login.html",controller:"LoginController as login"}).state("usersShow",{url:"/users/:id",templateUrl:"/templates/usersShow.html",controller:"UsersShowController as usersShow"}).state("usersEdit",{url:"/users/:id/edit",templateUrl:"/templates/usersEdit.html",controller:"UsersEditController as usersEdit"}).state("postsIndex",{url:"/posts",templateUrl:"/templates/postsIndex.html",controller:"PostsIndexController as postsIndex"}).state("postsNew",{url:"/posts/new",templateUrl:"/templates/postsNew.html",controller:"PostsNewController as postsNew"}).state("postsShow",{url:"/posts/:id",templateUrl:"/templates/postsShow.html",controller:"PostsShowController as postsShow"}).state("postsEdit",{url:"/posts/:id/edit",templateUrl:"/templates/postsEdit.html",controller:"PostsEditController as postsEdit"}),t.otherwise("/users")}function UploadController(){var e=this;e.data={}}function User(e,t){return new e(t+"/users/:id",{id:"@id"},{update:{method:"PUT"}})}function UsersIndexController(e){var t=this;t.all=e.query()}function UsersShowController(e,t,o){function r(){n.user.$remove(function(){t.go("usersIndex")})}var n=this;n.user=e.get(t.params),n.delete=r,n.isLoggedIn=o.isAuthenticated}function UsersEditController(e,t){function o(){r.user.$update(function(){t.go("usersShow",t.params)})}var r=this;r.user=e.get(t.params),this.update=o}angular.module("finalProject",["ngResource","ui.router","satellizer"]).constant("API_URL","http://localhost:3000/api").config(Auth),Auth.$inject=["$authProvider","API_URL"],angular.module("finalProject").controller("RegisterController",RegisterController).controller("LoginController",LoginController),RegisterController.$inject=["$auth","$state"],LoginController.$inject=["$auth","$state"],angular.module("finalProject").factory("Comment",Comment),Comment.$inject=["$resource","API_URL"],angular.module("finalProject").controller("CommentsIndexController",CommentsIndexController).controller("CommentsNewController",CommentsNewController).controller("CommentsShowController",CommentsShowController).controller("CommentsEditController",CommentsEditController),CommentsIndexController.$inject=["Comment","Comment","$state"],CommentsNewController.$inject=["Comment","$state","$auth"],CommentsShowController.$inject=["Comment","$state","$auth"],CommentsEditController.$inject=["Comment","$state"],angular.module("finalProject").directive("dragDrop",dragDrop),angular.module("finalProject").factory("Like",Like),Like.$inject=["$resource","API_URL"],angular.module("finalProject").controller("LikesController",LikesController),LikesController.$inject=["Post"],angular.module("finalProject").controller("MainController",MainController),MainController.$inject=["$auth","$state","$rootScope"],angular.module("finalProject").factory("Post",Post),Post.$inject=["$resource","API_URL"],angular.module("finalProject").controller("PostsIndexController",PostsIndexController).controller("PostsNewController",PostsNewController).controller("PostsShowController",PostsShowController).controller("PostsEditController",PostsEditController),PostsIndexController.$inject=["Post","Like","$state"],PostsNewController.$inject=["Post","$state"],PostsShowController.$inject=["Post","$state","$auth"],PostsEditController.$inject=["Post","$state"],angular.module("finalProject").config(Router),Router.$inject=["$stateProvider","$urlRouterProvider"],angular.module("finalProject").controller("UploadController",UploadController),angular.module("finalProject").factory("User",User),User.$inject=["$resource","API_URL"],angular.module("finalProject").controller("UsersIndexController",UsersIndexController).controller("UsersShowController",UsersShowController).controller("UsersEditController",UsersEditController),UsersIndexController.$inject=["User"],UsersShowController.$inject=["User","$state","$auth"],UsersEditController.$inject=["User","$state"];
//# sourceMappingURL=app.js.map
