{"version":3,"sources":["js/app.js","controllers/auth.js","js/models/comment.js","controllers/commentsController.js","js/directives/dragDrop.js","js/models/like.js","controllers/likesController.js","controllers/mainController.js","js/models/post.js","controllers/posts.js","js/router.js","controllers/upload.js","js/models/user.js","controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Comment","$resource","id","update","method","CommentsIndexController","comment","console","log","commentsIndex","newcomment","save","all","query","CommentsNewController","create","commentsNew","reload","post_id","parseInt","params","user_id","getPayload","CommentsShowController","deleteComment","commentsShow","post","$remove","get","delete","isLoggedIn","isAuthenticated","CommentsEditController","commentsEdit","$update","dragDrop","reader","FileReader","restrict","replace","templateUrl","scope","base64","src","link","$scope","element","active","onload","result","$apply","on","e","preventDefault","file","target","files","dataTransfer","readAsDataURL","Like","LikesController","Post","newLike","like","MainController","$rootScope","logout","secureState","toState","main","currentUser","message","protectedStates","includes","name","$on","PostsIndexController","postsIndex","newlike","likes_length","reverse","PostsNewController","postsNew","PostsShowController","deletePost","postsShow","currentUserId","isCurrentUser","$promise","PostsEditController","postsEdit","Router","$stateProvider","$urlRouterProvider","$locationProvider","html5Mode","state","url","controller","otherwise","UploadController","upload","data","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","window","location","hostname","config","$inject","factory","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n.constant('API_URL', window.location.hostname === 'localhost' ? 'http://localhost:3000/api' : '//instatram.herokuapp.com/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('postsIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('CommentsIndexController', CommentsIndexController)\n  .controller('CommentsNewController', CommentsNewController)\n  .controller('CommentsShowController', CommentsShowController)\n  .controller('CommentsEditController', CommentsEditController);\n\nCommentsIndexController.$inject = ['Comment', 'Comment', '$state'];\nfunction CommentsIndexController(Comment, $state) {\n  const commentsIndex = this;\n\n  commentsIndex.all = Comment.query();\n\n  commentsIndex.newcomment = {};\n\n  function comment() {\n    console.log('hi ED', commentsIndex.newcomment);\n\n    Comment.save(commentsIndex.newcomment, () => {\n      $state.go('commentsIndex');\n    });\n  }\n  commentsIndex.comment = comment;\n}\n\nCommentsNewController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsNewController(Comment, $state, $auth) {\n  const commentsNew = this;\n  commentsNew.comment = {};\n\n  commentsNew.comment.post_id = parseInt($state.params.id);\n  commentsNew.comment.user_id = parseInt($auth.getPayload().id);\n  function create() {\n    console.log('comment: ', commentsNew.comment);\n    Comment.save(commentsNew.comment, () => {\n      $state.reload();\n    });\n  }\n  commentsNew.create = create;\n}\n\nCommentsShowController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsShowController(Comment, $state, $auth) {\n  const commentsShow = this;\n\n  commentsShow.post = Comment.get($state.params);\n\n  function deleteComment() {\n    commentsShow.post.$remove(() => {\n      $state.go('commentsIndex');\n    });\n  }\n\n  commentsShow.delete = deleteComment;\n  commentsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nCommentsEditController.$inject = ['Comment', '$state'];\nfunction CommentsEditController(Comment, $state) {\n  const commentsEdit = this;\n\n  commentsEdit.post = Comment.get($state.params);\n\n  function update() {\n    commentsEdit.post.$update(() => {\n      $state.go('commentsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .directive('dragDrop', dragDrop);\n\nfunction dragDrop() {\n  const reader = new FileReader();\n\n  return {\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'templates/dragDrop.html',\n    scope: {\n      base64: '=',\n      src: '='\n    },\n    link($scope, element) {\n\n      $scope.active = false;\n\n      reader.onload = () => {\n        $scope.base64 = reader.result;\n        $scope.$apply();\n      };\n\n      element\n        .on('dragover', () => {\n          $scope.active = true;\n          $scope.$apply();\n        })\n        .on('dragover', (e) => {\n          e.preventDefault();\n        })\n        .on('dragleave', () => {\n          $scope.active = false;\n          $scope.$apply();\n        })\n        .on('drop', (e) => {\n          e.preventDefault();\n          const file = (e.target.files || e.dataTransfer.files)[0];\n\n          reader.readAsDataURL(file);\n        });\n    }\n  };\n}\n","angular.module('finalProject')\n  .factory('Like', Like);\n\nLike.$inject = ['$resource', 'API_URL'];\nfunction Like($resource, API_URL) {\n  return new $resource(`${API_URL}/likes/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('LikesController', LikesController);\n\nLikesController.$inject = ['Post'];\nfunction LikesController(Post) {\n  const newLike = this;\n\n  newLike.like = {};\n\n  function create() {\n    Like.save(newLike.like, () => {\n      $state.go('postsIndex');\n    });\n  }\n\n  newLike.create = create;\n}\n","angular\n .module('finalProject')\n .controller('MainController', MainController);\n\n\nMainController.$inject = ['$auth','$state','$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    console.log('clicked');\n    $auth.logout()\n   .then(() => {\n     $state.go('usersIndex');\n   });\n\n  }\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState) {\n    if ($auth.getPayload()) {\n      return main.currentUser = $auth.getPayload().id;\n    }\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n\n}\n","angular.module('finalProject')\n  .factory('Post', Post);\n\nPost.$inject = ['$resource', 'API_URL'];\nfunction Post($resource, API_URL) {\n  return new $resource(`${API_URL}/posts/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('PostsIndexController', PostsIndexController)\n  .controller('PostsNewController', PostsNewController)\n  .controller('PostsShowController', PostsShowController)\n  .controller('PostsEditController', PostsEditController);\n\nPostsIndexController.$inject = ['Post', 'Like', '$state'];\nfunction PostsIndexController(Post, Like, $state) {\n  const postsIndex = this;\n\n  postsIndex.all = Post.query();\n  console.log(postsIndex.all);\n  postsIndex.all.reverse();\n  console.log(postsIndex.all);\n\n  postsIndex.newlike = {};\n\n  function like(post) {\n    postsIndex.newlike = {\n      post_id: post.id\n    };\n    console.log('hi ED', postsIndex.newlike);\n    Like.save(postsIndex.newlike, () => {\n      $state.go('postsIndex');\n      post.likes_length++;\n    });\n  }\n  postsIndex.like = like;\n}\n\nPostsNewController.$inject = ['Post', '$state'];\nfunction PostsNewController(Post, $state) {\n  const postsNew = this;\n\n  postsNew.post = {};\n\n  function create() {\n    Post.save(postsNew.post, () => {\n      $state.go('postsIndex');\n    });\n  }\n\n  postsNew.create = create;\n}\n\nPostsShowController.$inject = ['Post', '$state', '$auth'];\nfunction PostsShowController(Post, $state, $auth) {\n  const postsShow = this;\n\n  if ($auth.isAuthenticated()) {\n    postsShow.currentUserId = $auth.getPayload().id;\n  }\n  postsShow.isCurrentUser = false;\n\n  Post.get($state.params).$promise.then((post) => {\n    postsShow.post = post;\n\n    if(postsShow.currentUserId === postsShow.post.user_id) {\n      postsShow.isCurrentUser = true;\n    }\n  })\n\n\n\n  console.log(postsShow.post);\n  function deletePost() {\n    postsShow.post.$remove(() => {\n      $state.go('postsIndex');\n    });\n  }\n\n  postsShow.delete = deletePost;\n  postsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nPostsEditController.$inject = ['Post', '$state'];\nfunction PostsEditController(Post, $state) {\n  const postsEdit = this;\n\n  postsEdit.post = Post.get($state.params);\n\n  function update() {\n    postsEdit.post.$update(() => {\n      $state.go('postsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];\nfunction Router($stateProvider, $urlRouterProvider, $locationProvider) {\n  $locationProvider.html5Mode(true);\n\n  $stateProvider\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('postsIndex', {\n      url: '/posts',\n      templateUrl: '/templates/postsIndex.html',\n      controller: 'PostsIndexController as postsIndex'\n    })\n    .state('postsNew', {\n      url: '/posts/new',\n      templateUrl: '/templates/postsNew.html',\n      controller: 'PostsNewController as postsNew'\n    })\n    .state('postsShow', {\n      url: '/posts/:id',\n      templateUrl: '/templates/postsShow.html',\n      controller: 'PostsShowController as postsShow'\n    })\n    .state('postsEdit', {\n      url: '/posts/:id/edit',\n      templateUrl: '/templates/postsEdit.html',\n      controller: 'PostsEditController as postsEdit'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('UploadController', UploadController);\n\nfunction UploadController() {\n  const upload = this;\n\n  upload.data = {};\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}