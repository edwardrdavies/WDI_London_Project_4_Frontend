{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/dragDrop.js","js/controllers/mainController.js","js/models/post.js","js/controllers/posts.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","dragDrop","reader","FileReader","restrict","replace","templateUrl","scope","base64","link","$scope","element","active","onload","result","$apply","on","e","preventDefault","file","target","files","dataTransfer","readAsDataURL","MainController","$rootScope","logout","secureState","toState","main","message","isAuthenticated","protectedStates","includes","name","isLoggedIn","$on","Post","$resource","id","update","method","PostsIndexController","postsIndex","all","query","PostsNewController","create","save","postsNew","post","Router","$stateProvider","$urlRouterProvider","state","url","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","$remove","get","params","delete","UsersEditController","usersEdit","$update","angular","module","constant","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .directive('dragDrop', dragDrop);\n\nfunction dragDrop() {\n  const reader = new FileReader();\n\n  return {\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'templates/dragDrop.html',\n    scope: {\n      base64: '='\n    },\n    link($scope, element) {\n\n      $scope.base64 = null;\n      $scope.active = false;\n\n      reader.onload = () => {\n        $scope.base64 = reader.result;\n        $scope.$apply();\n      };\n\n      element\n        .on('dragover', () => {\n          $scope.active = true;\n          $scope.$apply();\n        })\n        .on('dragover', (e) => {\n          e.preventDefault();\n        })\n        .on('dragleave', () => {\n          $scope.active = false;\n          $scope.$apply();\n        })\n        .on('drop', (e) => {\n          e.preventDefault();\n          const file = (e.target.files || e.dataTransfer.files)[0];\n\n          reader.readAsDataURL(file);\n        });\n    }\n  };\n}\n","angular\n .module('finalProject')\n .controller('MainController', MainController);\n\n\nMainController.$inject = ['$auth','$state','$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n   .then(() => {\n     $state.go('usersIndex');\n   });\n\n  }\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n\n}\n","angular.module('finalProject')\n  .factory('Post', Post);\n\nPost.$inject = ['$resource', 'API_URL'];\nfunction Post($resource, API_URL) {\n  return new $resource(`${API_URL}/posts/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('PostsIndexController', PostsIndexController)\n  .controller('PostsNewController', PostsNewController);\n\nPostsIndexController.$inject = ['Post'];\nfunction PostsIndexController(Post) {\n  const postsIndex = this;\n\n  postsIndex.all = Post.query();\n}\n\nPostsNewController.$inject = ['Post', '$state'];\nfunction PostsNewController(Post, $state) {\n  const postsNew = this;\n\n  postsNew.post = {};\n\n  function create() {\n    Post.save(postsNew.post, () => {\n      $state.go('postsIndex');\n    });\n  }\n\n  postsNew.create = create;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('postsIndex', {\n      url: '/posts',\n      templateUrl: '/templates/postsIndex.html',\n      controller: 'PostsIndexController as postsIndex'\n    })\n    .state('postsNew', {\n      url: '/posts/new',\n      templateUrl: '/templates/postsNew.html',\n      controller: 'PostsNewController as postsNew'\n    })\n    .state('postsShow', {\n      url: '/posts/new',\n      templateUrl: '/templates/postsShow.html',\n      controller: 'PostsShowController as postsShow'\n    }); \n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}